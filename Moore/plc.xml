<?xml version='1.0' encoding='utf-8'?>
<project xmlns:ns1="http://www.plcopen.org/xml/tc6_0201" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.plcopen.org/xml/tc6_0201">
  <fileHeader companyName="Unknown" productName="Unnamed" productVersion="1" creationDateTime="2020-04-12T15:34:46"/>
  <contentHeader name="Unnamed" modificationDateTime="2020-05-02T16:45:39">
    <coordinateInfo>
      <fbd>
        <scaling x="10" y="10"/>
      </fbd>
      <ld>
        <scaling x="10" y="10"/>
      </ld>
      <sfc>
        <scaling x="10" y="10"/>
      </sfc>
    </coordinateInfo>
  </contentHeader>
  <types>
    <dataTypes/>
    <pous>
      <pou name="array_ALL_1" pouType="functionBlock">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <localVars>
            <variable name="size">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="8"/>
              </initialValue>
            </variable>
          </localVars>
          <inputVars>
            <variable name="array1">
              <type>
                <array>
                  <dimension lower="0" upper="8"/>
                  <baseType>
                    <INT/>
                  </baseType>
                </array>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="output">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="help">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="true"/>
              </initialValue>
            </variable>
            <variable name="index">
              <type>
                <INT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[FOR index := 0 TO size DO
  IF (array1[index]<>1) THEN
    help := false;
    EXIT;
  END_IF;
END_FOR;

output := help;]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="array_MASK2" pouType="functionBlock">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <localVars constant="true">
            <variable name="size">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="8"/>
              </initialValue>
            </variable>
          </localVars>
          <inputVars>
            <variable name="array1">
              <type>
                <array>
                  <dimension lower="0" upper="8"/>
                  <baseType>
                    <INT/>
                  </baseType>
                </array>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="output">
              <type>
                <array>
                  <dimension lower="0" upper="8"/>
                  <baseType>
                    <INT/>
                  </baseType>
                </array>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="index">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="help">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[
FOR index := 0 TO size DO
  help := array1[index];
  
  IF (help = 1) THEN
    output[index] := 0;
  ELSIF (help = 0) THEN
    output[index] := 1;
  ELSIF (help = -1) THEN
    output[index] := 1;
  ELSE
    output[index] := 99; (* This sould not happned *)
  END_IF;
  
  
END_FOR;]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="array_NOT" pouType="functionBlock">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <localVars>
            <variable name="size">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="3"/>
              </initialValue>
            </variable>
          </localVars>
          <inputVars>
            <variable name="array1">
              <type>
                <array>
                  <dimension lower="0" upper="3"/>
                  <baseType>
                    <INT/>
                  </baseType>
                </array>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="output">
              <type>
                <array>
                  <dimension lower="0" upper="3"/>
                  <baseType>
                    <INT/>
                  </baseType>
                </array>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="index">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="help">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[
FOR index := 0 TO size DO
  help := array1[index];
  
  IF (help = 0) THEN
    output[index]:= 1;
  ELSIF (help = 1) THEN
    output[index] := 0;
  ELSE
    output[index] := 99; (* This should not happend *)
  END_IF;
  
END_FOR;]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="array_MASK1" pouType="functionBlock">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <localVars>
            <variable name="size">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="8"/>
              </initialValue>
            </variable>
          </localVars>
          <inputVars>
            <variable name="array1">
              <type>
                <array>
                  <dimension lower="0" upper="8"/>
                  <baseType>
                    <INT/>
                  </baseType>
                </array>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="output">
              <type>
                <array>
                  <dimension lower="0" upper="8"/>
                  <baseType>
                    <INT/>
                  </baseType>
                </array>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="index">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="help">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[
FOR index := 0 TO size DO
  help := array1[index];
  
  IF (help = -1) THEN
    output[index]:= 0;
  ELSE
    output[index] := 1;
  END_IF;
  
END_FOR;]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="array_EQUAL" pouType="functionBlock">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <localVars>
            <variable name="size">
              <type>
                <INT/>
              </type>
            </variable>
          </localVars>
          <inputVars>
            <variable name="array1">
              <type>
                <array>
                  <dimension lower="0" upper="3"/>
                  <baseType>
                    <INT/>
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="array2">
              <type>
                <array>
                  <dimension lower="0" upper="3"/>
                  <baseType>
                    <INT/>
                  </baseType>
                </array>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="output">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="true"/>
              </initialValue>
            </variable>
          </outputVars>
          <localVars>
            <variable name="index">
              <type>
                <INT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[FOR index := 0 TO size DO
  IF (array1[index]<>array2[index]) THEN
    output := false;
    EXIT;
  END_IF;
END_FOR;]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="array_EQUAL_function" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <localVars>
            <variable name="size">
              <type>
                <INT/>
              </type>
            </variable>
          </localVars>
          <inputVars>
            <variable name="array1">
              <type>
                <array>
                  <dimension lower="0" upper="3"/>
                  <baseType>
                    <INT/>
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="array2">
              <type>
                <array>
                  <dimension lower="0" upper="3"/>
                  <baseType>
                    <INT/>
                  </baseType>
                </array>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="help">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="true"/>
              </initialValue>
            </variable>
            <variable name="index">
              <type>
                <INT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[FOR index := 0 TO size DO
  IF (array1[index]=array2[index]) THEN
      help := true;
  ELSE
    help := false;
  END_IF;
END_FOR;

array_EQUAL_function := true;]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="array_XOR" pouType="functionBlock">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <localVars constant="true">
            <variable name="size">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="8"/>
              </initialValue>
            </variable>
          </localVars>
          <inputVars>
            <variable name="array1">
              <type>
                <array>
                  <dimension lower="0" upper="8"/>
                  <baseType>
                    <INT/>
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="array2">
              <type>
                <array>
                  <dimension lower="0" upper="8"/>
                  <baseType>
                    <INT/>
                  </baseType>
                </array>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="output">
              <type>
                <array>
                  <dimension lower="0" upper="8"/>
                  <baseType>
                    <INT/>
                  </baseType>
                </array>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="index">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="help">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[
FOR index := 0 TO size DO
  help := array1[index] + array2[index];
  
  IF (help = 0) THEN
    output[index]:= 0;
  ELSIF (help = 1) THEN
    output[index]:= 1;
  ELSE
    output[index] := 0;
  END_IF;
  
END_FOR;]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="superstate_machine" pouType="program">
        <interface>
          <externalVars>
            <variable name="ssm_transitions">
              <type>
                <WORD/>
              </type>
            </variable>
            <variable name="current_superstate">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="WDT">
              <type>
                <UINT/>
              </type>
            </variable>
          </externalVars>
          <localVars>
            <variable name="col">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="tmp1">
              <type>
                <WORD/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="tmp2">
              <type>
                <WORD/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="tmp3">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="123"/>
              </initialValue>
            </variable>
          </localVars>
          <externalVars>
            <variable name="sensor_output">
              <type>
                <WORD/>
              </type>
            </variable>
          </externalVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[VAR
transition_matrix: ARRAY[0..5,0..10] OF INT := [
(*  1     2     4     8     16    32      64      128   256     512      1024
(*  EM    SAP   APF   SMP   MPF   SSVC    SVCF    EMF   WDOx    RESx     BAD *)
    4,    1,    -1,   2,    -1,   3,      -1,     -1,   -1,     -1,       -1, (* IDLE *)
    4,    -1,   0,    -1,   -1,   -1,     -1,     -1,   5,      -1,       -1, (* AP *)
    4,    -1,   -1,   -1,   0,    -1,     -1,     -1,   -1,     -1,       -1, (* MP *)
    4,    -1,   -1,   -1,   -1,   -1,     0,      -1,   -1,     -1,       -1, (* SVC *)
    -1,   -1,   -1,   -1,   -1,   -1,     -1,     0,    -1,     -1,       -1, (* EMG *)
    4,    -1,   -1,   -1,   -1,   -1,     -1,     -1,   -1,      1,       3   (* FAIL *)    
  ];
END_VAR

VAR
transition_masks: ARRAY[0..10] OF WORD := [
(*  BAD RESx WDOx  EMF  SVCF SSVC  MPF SMP APF SAP EM   *)
2#00000_00000000001,
2#00000_00000000010,
2#00000_00000000100,
2#00000_00000001000,
2#00000_00000010000,
2#00000_00000100000,
2#00000_00001000000,
2#00000_00010000000,
2#00000_00100000000,
2#00000_01000000000,
2#00000_10000000000
];
END_VAR

(* superstate transitions *)
FOR col := 0 TO 10 DO
  IF (transition_matrix[current_superstate,col] <> -1) THEN
    IF (ssm_transitions AND transition_masks[col]) = transition_masks[col] THEN
      current_superstate :=  transition_matrix[current_superstate,col];
      WDT := 0; (*RESET WDT*)
    END_IF;
  END_IF;
END_FOR;

]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="autoproduction" pouType="program">
        <interface>
          <externalVars>
            <variable name="controller_output">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="current_superstate">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="sensor_output">
              <type>
                <WORD/>
              </type>
            </variable>
            <variable name="WDT">
              <type>
                <UINT/>
              </type>
            </variable>
            <variable name="ssm_transitions">
              <type>
                <WORD/>
              </type>
            </variable>
          </externalVars>
          <localVars>
            <variable name="current_state">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="col">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="get_mask_instance">
              <type>
                <derived name="get_mask"/>
              </type>
            </variable>
            <variable name="mask_instance">
              <type>
                <derived name="array_mask"/>
              </type>
            </variable>
            <variable name="mask">
              <type>
                <array>
                  <dimension lower="0" upper="8"/>
                  <baseType>
                    <INT/>
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="isSameAsMask">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="a0">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="a1">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="b0">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="b1">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="c0">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="c1">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="d0">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="d1">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="prox">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="input">
              <type>
                <array>
                  <dimension lower="0" upper="8"/>
                  <baseType>
                    <INT/>
                  </baseType>
                </array>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[VAR
transition_matrix: ARRAY[0..9,0..9] OF INT := [
(*     prox  a1      b0      c0      c0d0    d1      c0d1      b0      d0      a0 *)
        1,    -1,     -1,     -1,      -1,     -1,     -1,      -1,     -1,     -1, (* START - 100 *)
       -1,     2,     -1,     -1,      -1,     -1,     -1,      -1,     -1,     -1, (* 101 *)
       -1,    -1,      3,     -1,      -1,     -1,     -1,      -1,     -1,     -1, (* 102 *)
       -1,    -1,     -1,      4,      -1,     -1,     -1,      -1,     -1,     -1, (* 103 *)
       -1,    -1,     -1,     -1,       5,     -1,      6,      -1,     -1,     -1, (* 104 *)
       -1,    -1,     -1,     -1,      -1,      3,     -1,      -1,     -1,     -1, (* 105 *)
       -1,    -1,     -1,     -1,      -1,     -1,     -1,       7,     -1,     -1, (* 106 *)
       -1,    -1,     -1,     -1,      -1,     -1,     -1,      -1,      8,     -1, (* 107 *)
       -1,    -1,     -1,     -1,      -1,     -1,     -1,      -1,     -1,      9, (* 108 *)
       -1,    -1,     -1,     -1,      -1,     -1,     -1,      -1,     -1,     -1 (* 109 *)
  ];
END_VAR






VAR
  maskArray: ARRAY[0..9,0..8] OF INT := [
  -1,      -1,      -1,      -1,      -1,      -1,      -1,      -1,       1, (*       prox 1*)
  -1,       1,      -1,      -1,      -1,      -1,      -1,      -1,      -1, (*       a1 2*)
  -1,      -1,      -1,       1,      -1,      -1,      -1,      -1,      -1, (*       b0 3*)
  -1,      -1,      -1,      -1,      -1,       1,      -1,      -1,      -1, (*       c0 4*)
  -1,      -1,      -1,      -1,       1,      -1,       1,      -1,      -1, (*       c0d0 5*)
  -1,      -1,      -1,      -1,      -1,      -1,      -1,       1,      -1, (*       d1 6*)
  -1,      -1,      -1,      -1,       1,      -1,      -1,       1,      -1, (*       c0d1 7*)
  -1,      -1,       1,      -1,      -1,      -1,      -1,      -1,      -1, (*       b0 8*)
  -1,      -1,      -1,      -1,      -1,      -1,       1,      -1,      -1, (*       d0 9*)
   1,      -1,      -1,      -1,      -1,      -1,      -1,      -1,      -1 (*        a0 10*)
  ];
END_VAR

VAR
maskOriginal: ARRAY[0..10] OF WORD  := [ (* 0 0 0 0 0 0 emg a0 a1 b0 b0 c0 c0 d0 d1 prox *)
  2#0000000_000000001, (*       prox 1*)
  2#0000000_010000000, (*       a1 2*)
  2#0000000_000100000, (*       b0 3*)
  2#0000000_000001000, (*       c0 4*)
  2#0000000_000010100, (*       c0d0 5*)
  2#0000000_000000010, (*       d1 6*)
  2#0000000_000010010, (*       c0d1 7*)
  2#0000000_001000000, (*       b0 8*)
  2#0000000_000000100, (*       d0 9*)
  2#0000000_100000000 (*        a0 10*)
  (* back to init state *)
  ];
END_VAR

VAR
state_output: ARRAY[0..11] OF BYTE  := [ 
(* A+ A- B C D+ D- 0 0 /// State transitions *)
  2#00000000, (* init - wait                                       0 0 *)
  2#10000000, (* prox -> 1 - set A+                                128 1*)
  2#00100000, (* a0 -> 0, a1 -> 1 - set B, reset A+ (bistable)     32 2*)
  2#00110000, (* b0 -> 0, b0 -> 1 - set C                          48 3*)
  2#00100000, (* c0 -> 0, c0 -> 1 - reset C                        32 4*)
  2#00101000, (* c0 -> 1, c0 -> 0 - set D+                         40 5*)
  2#00000000, (* c0 -> 1, c0 -> 0 - reset B                        0 6*)
  2#00000100, (* b0 -> 1, b0 -> 0 - set D-                         8 7*)
  2#01000000, (* d0 -> 1, d1 -> 0 - reset D-, set A-               64 8*)
  2#00000000 (*  a0 -> 1, a1 -> 0 - reset A-                       0 9*)
  (* back to init state *)
  ];
END_VAR








(* permission *)
IF current_superstate = 1 THEN
      
     
      
      (* interstate transitions *)
      FOR col := 0 TO 10 DO
        
        (* fills input of sensors *)
        input[0] := a0;
        input[1] := a1;
        input[2] := b0;
        input[3] := b1;
        input[4] := c0;
        input[5] := c1;
        input[6] := d0;
        input[7] := d1;
        input[8] := prox;
        
        IF (transition_matrix[current_state,col] <> -1) THEN
          
          get_mask_instance(masks := maskArray, maskIndex := col, mask => mask);
          
          mask_instance(mask := mask, input := input, output =>isSameAsMask);
          IF isSameAsMask THEN
            current_state :=  transition_matrix[current_state,col];
            WDT := 0; 
          END_IF;
        END_IF;
      END_FOR;
      
      
      
      
      
      
      
      
      (* actuator signal *)
      controller_output := state_output[current_state];
      
       (* watchdog timer *)
    (* TODO : make watchdogtimer "overflow" value state dependent instead of fixed 1000
        add an array with overflow values for each state *)                                                  
      IF WDT > 6000 THEN
        (* set failure symptome WDOx as true *)
        ssm_transitions := ssm_transitions OR 256;
      END_IF;
      
     (* final state reached *)                                              
      IF current_state = 9 THEN
        ssm_transitions := ssm_transitions OR 4;
        current_state := 0;
      END_IF;
      
END_IF;]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="failure" pouType="program">
        <interface>
          <externalVars>
            <variable name="current_superstate">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="ssm_transitions">
              <type>
                <WORD/>
              </type>
            </variable>
          </externalVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* permission *)
IF current_superstate = 5 THEN
  
      (* set failure symptome WDOx as false *)
      ssm_transitions := ssm_transitions AND NOT 256;
      
      
      
END_IF;]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="watchdogtimer" pouType="program">
        <interface>
          <externalVars>
            <variable name="WDT">
              <type>
                <UINT/>
              </type>
            </variable>
          </externalVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[WDT := WDT + 1;]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="array_AND" pouType="functionBlock">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <localVars>
            <variable name="size">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="8"/>
              </initialValue>
            </variable>
          </localVars>
          <inputVars>
            <variable name="array1">
              <type>
                <array>
                  <dimension lower="0" upper="8"/>
                  <baseType>
                    <INT/>
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="array2">
              <type>
                <array>
                  <dimension lower="0" upper="8"/>
                  <baseType>
                    <INT/>
                  </baseType>
                </array>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="output">
              <type>
                <array>
                  <dimension lower="0" upper="8"/>
                  <baseType>
                    <INT/>
                  </baseType>
                </array>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="index">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="help">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[
FOR index := 0 TO size DO
  help := array1[index] + array2[index];
  
  IF (help = 0) THEN
    output[index]:= 0;
  ELSIF (help = 1) THEN
    output[index]:= 0;
  ELSIF (help = 2) THEN
    output[index] := 1;
  ELSE
    output[index] := 99; (* This should not happend *)
  END_IF;
  
END_FOR;]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="test_function" pouType="function">
        <interface>
          <returnType>
            <INT/>
          </returnType>
          <inputVars>
            <variable name="MyConstant">
              <type>
                <INT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[test_function := MyConstant;]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="array_mask" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="mask">
              <type>
                <array>
                  <dimension lower="0" upper="8"/>
                  <baseType>
                    <INT/>
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="input">
              <type>
                <array>
                  <dimension lower="0" upper="8"/>
                  <baseType>
                    <INT/>
                  </baseType>
                </array>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="help">
              <type>
                <array>
                  <dimension lower="0" upper="8"/>
                  <baseType>
                    <INT/>
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="mask1">
              <type>
                <array>
                  <dimension lower="0" upper="8"/>
                  <baseType>
                    <INT/>
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="mask2">
              <type>
                <array>
                  <dimension lower="0" upper="8"/>
                  <baseType>
                    <INT/>
                  </baseType>
                </array>
              </type>
            </variable>
          </localVars>
          <outputVars>
            <variable name="output">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="array_mask1_instance">
              <type>
                <derived name="array_MASK1"/>
              </type>
            </variable>
            <variable name="array_mask2_instance">
              <type>
                <derived name="array_MASK2"/>
              </type>
            </variable>
            <variable name="array_and_instance">
              <type>
                <derived name="array_AND"/>
              </type>
            </variable>
            <variable name="array_xor_instance">
              <type>
                <derived name="array_XOR"/>
              </type>
            </variable>
            <variable name="array_all_1_instance">
              <type>
                <derived name="array_ALL_1"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* algorithm for mask*)
array_xor_instance(array1 := mask, output => mask1);

array_mask2_instance(array1 := mask, output => mask2);

array_and_instance(array1 := input, array2 := mask1, output => help);

array_xor_instance(array1 := help, array2 := mask2, output => help);

array_all_1_instance(array1 := help, output => output);]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="get_mask" pouType="functionBlock">
        <interface>
          <localVars constant="true">
            <variable name="size">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="8"/>
              </initialValue>
            </variable>
          </localVars>
          <inputVars>
            <variable name="masks">
              <type>
                <array>
                  <dimension lower="0" upper="9"/>
                  <dimension lower="0" upper="8"/>
                  <baseType>
                    <INT/>
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="maskIndex">
              <type>
                <INT/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="mask">
              <type>
                <array>
                  <dimension lower="0" upper="8"/>
                  <baseType>
                    <INT/>
                  </baseType>
                </array>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="index">
              <type>
                <INT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[FOR index := 0 TO size DO
  mask[index] := masks[maskIndex,index];
END_FOR;]]></xhtml:p>
          </ST>
        </body>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations>
      <configuration name="Config0">
        <resource name="Res0">
          <task name="task0" priority="0" interval="T#100ms">
            <pouInstance name="SSM" typeName="superstate_machine"/>
            <pouInstance name="AP" typeName="autoproduction"/>
            <pouInstance name="FAIL" typeName="failure"/>
          </task>
          <task name="WDT_clock" priority="0" interval="T#10ms">
            <pouInstance name="WDTimer" typeName="watchdogtimer"/>
          </task>
        </resource>
        <globalVars>
          <variable name="controller_output">
            <type>
              <BYTE/>
            </type>
          </variable>
          <variable name="WDT">
            <type>
              <UINT/>
            </type>
          </variable>
          <variable name="current_superstate">
            <type>
              <INT/>
            </type>
          </variable>
          <variable name="sensor_output">
            <type>
              <WORD/>
            </type>
          </variable>
          <variable name="ssm_transitions">
            <type>
              <WORD/>
            </type>
          </variable>
        </globalVars>
      </configuration>
    </configurations>
  </instances>
</project>

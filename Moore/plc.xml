<?xml version='1.0' encoding='utf-8'?>
<project xmlns:ns1="http://www.plcopen.org/xml/tc6_0201" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.plcopen.org/xml/tc6_0201">
  <fileHeader companyName="Unknown" productName="Unnamed" productVersion="1" creationDateTime="2020-04-12T15:34:46"/>
  <contentHeader name="Unnamed" modificationDateTime="2020-05-12T21:32:04">
    <coordinateInfo>
      <fbd>
        <scaling x="10" y="10"/>
      </fbd>
      <ld>
        <scaling x="10" y="10"/>
      </ld>
      <sfc>
        <scaling x="10" y="10"/>
      </sfc>
    </coordinateInfo>
  </contentHeader>
  <types>
    <dataTypes/>
    <pous>
      <pou name="manualproduction" pouType="program">
        <interface>
          <localVars>
            <variable name="valueMatrix">
              <type>
                <array>
                  <dimension lower="0" upper="11"/>
                  <baseType>
                    <DWORD/>
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="maskMatrix">
              <type>
                <array>
                  <dimension lower="0" upper="11"/>
                  <baseType>
                    <DWORD/>
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="outputMatrix">
              <type>
                <array>
                  <dimension lower="0" upper="10"/>
                  <baseType>
                    <DWORD/>
                  </baseType>
                </array>
              </type>
            </variable>
          </localVars>
          <externalVars>
            <variable name="controller_output">
              <type>
                <DWORD/>
              </type>
            </variable>
            <variable name="current_superstate">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="sensor_output">
              <type>
                <DWORD/>
              </type>
            </variable>
            <variable name="WDT">
              <type>
                <UINT/>
              </type>
            </variable>
            <variable name="ssm_transitions">
              <type>
                <WORD/>
              </type>
            </variable>
          </externalVars>
          <localVars>
            <variable name="current_state">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="column">
              <type>
                <INT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(*TESTOVACÍ SEKVENCE - VÝSTUP ZE SENZORŮ*)
(*
VLOŽENÍ OBROBKU -- x202 ->16777418
UPNUTÍ OBROBKU --x170 -> 16777386
SPUŠTĚNÍ VŘETENE --x186 -> 16777402
VYSUNUTÍ MOTORU C (VRTÁNÍ) --x182 -> 16777398
ZASUNUTÍ MOTORU C (VRTÁNÍ) --x186 -> 16777402
PRESUN OBROBKU DO DRUHÉ POLOHY --x185 ->16777401
VYSUNUTÍ MOTORU C (VRTÁNÍ) --x181 ->16777397
ZASUNUTÍ MOTORU C (VRTÁNÍ) --x185 -> 16777401
VYPNUTÍ VŘETENE --x169 -> 16777385
NÁVRAT DO PŮVODNÍ POLOHY --x170 ->16777386
UVOLNĚNÍ OBROBKU --16777418
ODEBRÁNÍ OBROBKU --16777290
*)

VAR
  transitionMatrixMP: ARRAY[0..10,0..10] OF INT := [
  (* prox   Nprox   a1      b1      c1      c0d0    d1      c0d1       Nb      d0      a0 *)
     1,    -1,      -1,     -1,     -1,      -1,     -1,     -1,      -1,     -1,     -1, (* (0) ČEKÁ NA VLOŽENÍ OBROBKU  *)
    -1,    -1,       2,     -1,     -1,      -1,     -1,     -1,      -1,     -1,     -1, (* (1) ČEKÁ NA VYSUNUTÍ MOTORU A (UPNUTÍ) *)
    -1,    -1,      -1,      3,     -1,      -1,     -1,     -1,      -1,     -1,     -1, (* (2) ČEKÁ NA SPUŠTĚNÍ VŘETENE *)
    -1,    -1,      -1,     -1,      4,      -1,     -1,     -1,      -1,     -1,     -1, (* (3) ČEKÁ NA VYSUNUTÍ MOTORU C (VRTÁNÍ) *)
    -1,    -1,      -1,     -1,     -1,       5,     -1,      6,      -1,     -1,     -1, (* (4) ČEKÁ NA ZASUNUTÍ MOTORU C (VRTÁNÍ) *)
    -1,    -1,      -1,     -1,     -1,      -1,      3,     -1,      -1,     -1,     -1, (* (5) ČEKÁ NA VYSUNUTÍ MOTORU D (PŘESUN OBROBKU DO DRUHÉ POLOHY) *)
    -1,    -1,      -1,     -1,     -1,      -1,     -1,     -1,       7,     -1,     -1, (* (6) ČEKÁ NA VYPNUTÍ VŘETENE (KONEC VRTÁNÍ) *)
    -1,    -1,      -1,     -1,     -1,      -1,     -1,     -1,      -1,      8,     -1, (* (7) ČEKÁ NA ZASUNUTÍ MOTORU D (NÁVRAT DO PŮVODNÍ POLOHY) *)
    -1,    -1,      -1,     -1,     -1,      -1,     -1,     -1,      -1,     -1,      9, (* (8) ČEKÁ NA ZASUNUTÍ MOTORU A (UVOLNĚNÍ OBROBKU) *)
    -1,    10,      -1,     -1,     -1,      -1,     -1,     -1,      -1,     -1,     -1, (* (9) ČEKÁ NA ODEBRÁNÍ OBROBKU *)
    -1,    -1,      -1,     -1,     -1,      -1,     -1,     -1,      -1,     -1,     -1  (* (10) KONEČNÝ STAV SKOČÍ DO SUPERSTAVU INIT *)
  ];
END_VAR 

(*NAPLNĚNÍ MATICE MASEK*)
(* nextStep_..._...  _ prox a0 a1 b c0 c1 d0 d1  - JEDNOTLIVÉ BITY PŘEDSTAVUJÍCÍ VSTUPY PLC V TOMTO POŘADÍ*)
(*JEDNOTLIVÉ ŘÁDKY MAJÍ STEJNÉ POŘADÍ JAKO JSOU SLOUPCE MATICE PŘECHODU*)
maskMatrix[0]  := 2#00000001_00000000_00000000_10000000; (*PROXIMITY SENZOR SEPNUTO*) 
maskMatrix[1]  := 2#00000001_00000000_00000000_10000000; (*PROXIMITY SENZOR NESEPNUTO*)
maskMatrix[2]  := 2#00000001_00000000_00000000_00100000; (*KONCOVÝ SENZOR MOTORU A V POLOZE VYSUNUTO*)
maskMatrix[3]  := 2#00000001_00000000_00000000_00010000; (*SENZOR SEPNUTÍ VŘETENE B V POLOZE ZAPNUTO*)
maskMatrix[4]  := 2#00000001_00000000_00000000_00000100; (*KONCOVÝ SENZOR MOTORU C V POLOZE VYSUNUTO*)
maskMatrix[5]  := 2#00000001_00000000_00000000_00001010; (*KONCOVÝ SENZOR MOTORU C A D V POLOZE ZASUNUTO*)
maskMatrix[6]  := 2#00000001_00000000_00000000_00000001; (*KONCOVÝ SENZOR MOTORU D V POLOZE VYSUNUTO*)
maskMatrix[7]  := 2#00000001_00000000_00000000_00001001; (*KONCOVÝ SENZOR MOTORU D V POLOZE VYSUNUTO A KONCOVÝ SENZOR MOTORU C V POLOZE ZASUNUTO*)
maskMatrix[8]  := 2#00000001_00000000_00000000_00010000; (*SENZOR SEPNUTÍ VŘETENE B V POLOZE VYPNUTO*)
maskMatrix[9]  := 2#00000001_00000000_00000000_00000010; (*KONCOVÝ SENZOR MOTORU D V POLOZE ZASUNUTO*)
maskMatrix[10] := 2#00000001_00000000_00000000_01000000; (*KONCOVÝ SENZOR MOTORU A V POLOZE ZASUNUTO*)

(*NAPLNĚNÍ MATICE POŽADOVANÝCH HODNOT*)
(* ... emg a0 _ a1 b0 b1 c0 c1 d0 d1 prox  - JEDNOTLIVÉ BITY PŘEDSTAVUJÍCÍ VSTUPY PLC V TOMTO POŘADÍ*)
valueMatrix[0]  := 2#00000001_00000000_00000000_10000000; (*PROXIMITY SENZOR SEPNUTO*)
valueMatrix[1]  := 2#00000001_00000000_00000000_00000000; (*PROXIMITY SENZOR NESEPNUTO*)
valueMatrix[2]  := 2#00000001_00000000_00000000_00100000; (*KONCOVÝ SENZOR MOTORU A V POLOZE VYSUNUTO*)
valueMatrix[3]  := 2#00000001_00000000_00000000_00010000; (*SENZOR SEPNUTÍ VŘETENE B V POLOZE ZAPNUTO*)
valueMatrix[4]  := 2#00000001_00000000_00000000_00000100; (*KONCOVÝ SENZOR MOTORU C V POLOZE VYSUNUTO*)
valueMatrix[5]  := 2#00000001_00000000_00000000_00001010; (*KONCOVÝ SENZOR MOTORU C A D V POLOZE ZASUNUTO*)
valueMatrix[6]  := 2#00000001_00000000_00000000_00000001; (*KONCOVÝ SENZOR MOTORU D V POLOZE VYSUNUTO*)
valueMatrix[7]  := 2#00000001_00000000_00000000_00001001; (*KONCOVÝ SENZOR MOTORU D V POLOZE VYSUNUTO A KONCOVÝ SENZOR MOTORU C V POLOZE ZASUNUTO*)
valueMatrix[8]  := 2#00000001_00000000_00000000_00000000; (*SENZOR SEPNUTÍ VŘETENE B V POLOZE VYPNUTO*)
valueMatrix[9]  := 2#00000001_00000000_00000000_00000010; (*KONCOVÝ SENZOR MOTORU D V POLOZE ZASUNUTO*)
valueMatrix[10] := 2#00000001_00000000_00000000_01000000; (*KONCOVÝ SENZOR MOTORU A V POLOZE ZASUNUTO*)

(*NAPLNĚNÍ MATICE VÝSTUPŮ*)
(* ... A+ A- B C D+ D- 0 0   - JEDNOTLIVÉ BITY PŘEDSTAVUJÍCÍ AKTORY V TOMTO POŘADÍ*)
outputMatrix[0]  := 2#00000000_00000000_00000000_00000000; (*INICIÁLNÍ STAV, ŽÁDNÝ VÝSTUP NA AKTORY*)
outputMatrix[1]  := 2#00000000_00000000_00000000_10000000; (*UPNUTÍ OBROBKU*)
outputMatrix[2]  := 2#00000000_00000000_00000000_00100000; (*SEPNUTÍ VŘETENE*)
outputMatrix[3]  := 2#00000000_00000000_00000000_00110000; (*POSUV VŘETENE K OBROBKU*)
outputMatrix[4]  := 2#00000000_00000000_00000000_00100000; (*POSUV VŘETENE OD OBROBKU*)
outputMatrix[5]  := 2#00000000_00000000_00000000_00101000; (*PŘESUNUTÍ OBROBKU DO DRUHÉ POLOHY*)
outputMatrix[6]  := 2#00000000_00000000_00000000_00000000; (*VYPNUTÍ VŘETENE*)
outputMatrix[7]  := 2#00000000_00000000_00000000_00000100; (*NÁVRAT OBROBKU DO PŮVODNÍ POLOHY*)
outputMatrix[8]  := 2#00000000_00000000_00000000_01000000; (*UVOLNĚNÍ OBROBKU*)
outputMatrix[9]  := 2#00000000_00000000_00000000_00000000; (*ČEKÁNÍ NA ODEBRÁNÍ OBROBKU*)










(* ZDE JE KONTROLOVÁNO ZDA JSME V DANÉM SUPERSTAVU *)
IF current_superstate = 2 THEN
      
     
      
      (* PROCHÁZENÍ MATICE PŘECHODŮ *)
      FOR column := 0 TO 10 DO
        IF (transitionMatrixMP[current_state,column] <> -1) THEN
          IF (sensor_output AND maskMatrix[column]) = valueMatrix[column] THEN
            current_state :=  transitionMatrixMP[current_state,column];
            WDT := 0; (*RESET watchdogtimer*)
          END_IF;
        END_IF;
      END_FOR;
      
      (* actuator signal *)
      controller_output := outputMatrix[current_state];
      
      
      
     (* BYLO DOSAŽENO KONEČNÉHO STAVU SKOK DO IDDLE *)                                              
      IF current_state = 10 THEN
        ssm_transitions := ssm_transitions OR 4;
        current_state := 0;
      END_IF;
      
END_IF;]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="superstate_machine" pouType="program">
        <interface>
          <externalVars>
            <variable name="ssm_transitions">
              <type>
                <WORD/>
              </type>
            </variable>
            <variable name="current_superstate">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="WDT">
              <type>
                <UINT/>
              </type>
            </variable>
          </externalVars>
          <localVars>
            <variable name="col">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="tmp1">
              <type>
                <WORD/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="tmp2">
              <type>
                <WORD/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="tmp3">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="123"/>
              </initialValue>
            </variable>
          </localVars>
          <externalVars>
            <variable name="sensor_output">
              <type>
                <DWORD/>
              </type>
            </variable>
          </externalVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[VAR
transition_matrix: ARRAY[0..5,0..10] OF INT := [
(*  1     2     4     8     16    32      64      128   256     512      1024
(*  EM    SAP   APF   SMP   MPF   SSVC    SVCF    EMF   WDOx    RESx     BAD *)
    4,    1,    -1,   2,    -1,   3,      -1,     -1,   -1,     -1,       -1, (* IDLE *)
    4,    -1,   0,    -1,   -1,   -1,     -1,     -1,   5,      -1,       -1, (* AP *)
    4,    -1,   -1,   -1,   0,    -1,     -1,     -1,   -1,     -1,       -1, (* MP *)
    4,    -1,   -1,   -1,   -1,   -1,     0,      -1,   -1,     -1,       -1, (* SVC *)
    -1,   -1,   -1,   -1,   -1,   -1,     -1,     0,    -1,     -1,       -1, (* EMG *)
    4,    -1,   -1,   -1,   -1,   -1,     -1,     -1,   -1,      1,       3   (* FAIL *)    
  ];
END_VAR

VAR
transition_masks: ARRAY[0..10] OF WORD := [
(*  BAD RESx WDOx  EMF  SVCF SSVC  MPF SMP APF SAP EM   *)
2#00000_00000000001,
2#00000_00000000010,
2#00000_00000000100,
2#00000_00000001000,
2#00000_00000010000,
2#00000_00000100000,
2#00000_00001000000,
2#00000_00010000000,
2#00000_00100000000,
2#00000_01000000000,
2#00000_10000000000
];
END_VAR

(* superstate transitions *)
FOR col := 0 TO 10 DO
  IF (transition_matrix[current_superstate,col] <> -1) THEN
    IF (ssm_transitions AND transition_masks[col]) = transition_masks[col] THEN
      current_superstate :=  transition_matrix[current_superstate,col];
      WDT := 0; (*RESET WDT*)
    END_IF;
  END_IF;
END_FOR;

]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="autoproduction" pouType="program">
        <interface>
          <localVars>
            <variable name="valueMatrix">
              <type>
                <array>
                  <dimension lower="0" upper="11"/>
                  <baseType>
                    <DWORD/>
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="maskMatrix">
              <type>
                <array>
                  <dimension lower="0" upper="11"/>
                  <baseType>
                    <DWORD/>
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="outputMatrix">
              <type>
                <array>
                  <dimension lower="0" upper="10"/>
                  <baseType>
                    <DWORD/>
                  </baseType>
                </array>
              </type>
            </variable>
          </localVars>
          <externalVars>
            <variable name="controller_output">
              <type>
                <DWORD/>
              </type>
            </variable>
            <variable name="current_superstate">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="sensor_output">
              <type>
                <DWORD/>
              </type>
            </variable>
            <variable name="WDT">
              <type>
                <UINT/>
              </type>
            </variable>
            <variable name="ssm_transitions">
              <type>
                <WORD/>
              </type>
            </variable>
          </externalVars>
          <localVars>
            <variable name="current_state">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="column">
              <type>
                <INT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(*TESTOVACÍ SEKVENCE - VÝSTUP ZE SENZORŮ*)
(*
VLOŽENÍ OBROBKU -- 202
UPNUTÍ OBROBKU --170
SPUŠTĚNÍ VŘETENE --186
VYSUNUTÍ MOTORU C (VRTÁNÍ) --182
ZASUNUTÍ MOTORU C (VRTÁNÍ) --186
PRESUN OBROBKU DO DRUHÉ POLOHY --185
VYSUNUTÍ MOTORU C (VRTÁNÍ) --181
ZASUNUTÍ MOTORU C (VRTÁNÍ) --185
VYPNUTÍ VŘETENE --169
NÁVRAT DO PŮVODNÍ POLOHY --170
UVOLNĚNÍ OBROBKU --202
ODEBRÁNÍ OBROBKU --74
*)

VAR
  transitionMatrix: ARRAY[0..10,0..10] OF INT := [
  (* prox   Nprox   a1      b1      c1      c0d0    d1      c0d1       Nb      d0      a0 *)
     1,    -1,      -1,     -1,     -1,      -1,     -1,     -1,      -1,     -1,     -1, (* (0) ČEKÁ NA VLOŽENÍ OBROBKU  *)
    -1,    -1,       2,     -1,     -1,      -1,     -1,     -1,      -1,     -1,     -1, (* (1) ČEKÁ NA VYSUNUTÍ MOTORU A (UPNUTÍ) *)
    -1,    -1,      -1,      3,     -1,      -1,     -1,     -1,      -1,     -1,     -1, (* (2) ČEKÁ NA SPUŠTĚNÍ VŘETENE *)
    -1,    -1,      -1,     -1,      4,      -1,     -1,     -1,      -1,     -1,     -1, (* (3) ČEKÁ NA VYSUNUTÍ MOTORU C (VRTÁNÍ) *)
    -1,    -1,      -1,     -1,     -1,       5,     -1,      6,      -1,     -1,     -1, (* (4) ČEKÁ NA ZASUNUTÍ MOTORU C (VRTÁNÍ) *)
    -1,    -1,      -1,     -1,     -1,      -1,      3,     -1,      -1,     -1,     -1, (* (5) ČEKÁ NA VYSUNUTÍ MOTORU D (PŘESUN OBROBKU DO DRUHÉ POLOHY) *)
    -1,    -1,      -1,     -1,     -1,      -1,     -1,     -1,       7,     -1,     -1, (* (6) ČEKÁ NA VYPNUTÍ VŘETENE (KONEC VRTÁNÍ) *)
    -1,    -1,      -1,     -1,     -1,      -1,     -1,     -1,      -1,      8,     -1, (* (7) ČEKÁ NA ZASUNUTÍ MOTORU D (NÁVRAT DO PŮVODNÍ POLOHY) *)
    -1,    -1,      -1,     -1,     -1,      -1,     -1,     -1,      -1,     -1,      9, (* (8) ČEKÁ NA ZASUNUTÍ MOTORU A (UVOLNĚNÍ OBROBKU) *)
    -1,    10,      -1,     -1,     -1,      -1,     -1,     -1,      -1,     -1,     -1, (* (9) ČEKÁ NA ODEBRÁNÍ OBROBKU *)
    -1,    -1,      -1,     -1,     -1,      -1,     -1,     -1,      -1,     -1,     -1  (* (10) KONEČNÝ STAV SKOČÍ DO SUPERSTAVU INIT *)
  ];
END_VAR 

(*NAPLNĚNÍ MATICE MASEK*)
(* ...  _ prox a0 a1 b c0 c1 d0 d1  - JEDNOTLIVÉ BITY PŘEDSTAVUJÍCÍ VSTUPY PLC V TOMTO POŘADÍ*)
(*JEDNOTLIVÉ ŘÁDKY MAJÍ STEJNÉ POŘADÍ JAKO JSOU SLOUPCE MATICE PŘECHODU*)
maskMatrix[0]  := 2#00000000_00000000_00000000_10000000; (*PROXIMITY SENZOR SEPNUTO -- 128*) 
maskMatrix[1]  := 2#00000000_00000000_00000000_10000000; (*PROXIMITY SENZOR NESEPNUTO -- 128*)
maskMatrix[2]  := 2#00000000_00000000_00000000_00100000; (*KONCOVÝ SENZOR MOTORU A V POLOZE VYSUNUTO --32*)
maskMatrix[3]  := 2#00000000_00000000_00000000_00010000; (*SENZOR SEPNUTÍ VŘETENE B V POLOZE ZAPNUTO --16*)
maskMatrix[4]  := 2#00000000_00000000_00000000_00000100; (*KONCOVÝ SENZOR MOTORU C V POLOZE VYSUNUTO --4*)
maskMatrix[5]  := 2#00000000_00000000_00000000_00001010; (*KONCOVÝ SENZOR MOTORU C A D V POLOZE ZASUNUTO --10*)
maskMatrix[6]  := 2#00000000_00000000_00000000_00000001; (*KONCOVÝ SENZOR MOTORU D V POLOZE VYSUNUTO --1*)
maskMatrix[7]  := 2#00000000_00000000_00000000_00001001; (*KONCOVÝ SENZOR MOTORU D V POLOZE VYSUNUTO A KONCOVÝ SENZOR MOTORU C V POLOZE ZASUNUTO --9*)
maskMatrix[8]  := 2#00000000_00000000_00000000_00010000; (*SENZOR SEPNUTÍ VŘETENE B V POLOZE VYPNUTO --16*)
maskMatrix[9]  := 2#00000000_00000000_00000000_00000010; (*KONCOVÝ SENZOR MOTORU D V POLOZE ZASUNUTO --2*)
maskMatrix[10] := 2#00000000_00000000_00000000_01000000; (*KONCOVÝ SENZOR MOTORU A V POLOZE ZASUNUTO --64*)

(*NAPLNĚNÍ MATICE POŽADOVANÝCH HODNOT*)
(* ... emg a0 _ a1 b0 b1 c0 c1 d0 d1 prox  - JEDNOTLIVÉ BITY PŘEDSTAVUJÍCÍ VSTUPY PLC V TOMTO POŘADÍ*)
valueMatrix[0]  := 2#00000000_00000000_00000000_10000000; (*PROXIMITY SENZOR SEPNUTO*)
valueMatrix[1]  := 2#00000000_00000000_00000000_00000000; (*PROXIMITY SENZOR NESEPNUTO*)
valueMatrix[2]  := 2#00000000_00000000_00000000_00100000; (*KONCOVÝ SENZOR MOTORU A V POLOZE VYSUNUTO*)
valueMatrix[3]  := 2#00000000_00000000_00000000_00010000; (*SENZOR SEPNUTÍ VŘETENE B V POLOZE ZAPNUTO*)
valueMatrix[4]  := 2#00000000_00000000_00000000_00000100; (*KONCOVÝ SENZOR MOTORU C V POLOZE VYSUNUTO*)
valueMatrix[5]  := 2#00000000_00000000_00000000_00001010; (*KONCOVÝ SENZOR MOTORU C A D V POLOZE ZASUNUTO*)
valueMatrix[6]  := 2#00000000_00000000_00000000_00000001; (*KONCOVÝ SENZOR MOTORU D V POLOZE VYSUNUTO*)
valueMatrix[7]  := 2#00000000_00000000_00000000_00001001; (*KONCOVÝ SENZOR MOTORU D V POLOZE VYSUNUTO A KONCOVÝ SENZOR MOTORU C V POLOZE ZASUNUTO*)
valueMatrix[8]  := 2#00000000_00000000_00000000_00000000; (*SENZOR SEPNUTÍ VŘETENE B V POLOZE VYPNUTO*)
valueMatrix[9]  := 2#00000000_00000000_00000000_00000010; (*KONCOVÝ SENZOR MOTORU D V POLOZE ZASUNUTO*)
valueMatrix[10] := 2#00000000_00000000_00000000_01000000; (*KONCOVÝ SENZOR MOTORU A V POLOZE ZASUNUTO*)

(*NAPLNĚNÍ MATICE VÝSTUPŮ*)
(* ... A+ A- B C D+ D- 0 0   - JEDNOTLIVÉ BITY PŘEDSTAVUJÍCÍ AKTORY V TOMTO POŘADÍ*)
outputMatrix[0]  := 2#00000000_00000000_00000000_00000000; (*INICIÁLNÍ STAV, ŽÁDNÝ VÝSTUP NA AKTORY*)
outputMatrix[1]  := 2#00000000_00000000_00000000_10000000; (*UPNUTÍ OBROBKU*)
outputMatrix[2]  := 2#00000000_00000000_00000000_00100000; (*SEPNUTÍ VŘETENE*)
outputMatrix[3]  := 2#00000000_00000000_00000000_00110000; (*POSUV VŘETENE K OBROBKU*)
outputMatrix[4]  := 2#00000000_00000000_00000000_00100000; (*POSUV VŘETENE OD OBROBKU*)
outputMatrix[5]  := 2#00000000_00000000_00000000_00101000; (*PŘESUNUTÍ OBROBKU DO DRUHÉ POLOHY*)
outputMatrix[6]  := 2#00000000_00000000_00000000_00000000; (*VYPNUTÍ VŘETENE*)
outputMatrix[7]  := 2#00000000_00000000_00000000_00000100; (*NÁVRAT OBROBKU DO PŮVODNÍ POLOHY*)
outputMatrix[8]  := 2#00000000_00000000_00000000_01000000; (*UVOLNĚNÍ OBROBKU*)
outputMatrix[9]  := 2#00000000_00000000_00000000_00000000; (*ČEKÁNÍ NA ODEBRÁNÍ OBROBKU*)










(* ZDE JE KONTROLOVÁNO ZDA JSME V DANÉM SUPERSTAVU *)
IF current_superstate = 1 THEN
      
     
      
      (* PROCHÁZENÍ MATICE PŘECHODŮ *)
      FOR column := 0 TO 10 DO
        IF (transitionMatrix[current_state,column] <> -1) THEN
          IF (sensor_output AND maskMatrix[column]) = valueMatrix[column] THEN
            current_state :=  transitionMatrix[current_state,column];
            WDT := 0; (*RESET watchdogtimer*)
          END_IF;
        END_IF;
      END_FOR;
      
      (* actuator signal *)
      controller_output := outputMatrix[current_state];
      
      (* watchdog timer  - KONTROLUJE ZDA NEDOŠLO K ZASEKNUTÍ*)                                                 
      IF WDT > 3000 THEN
        (* set failure symptome WDOx as true *)
        ssm_transitions := ssm_transitions OR 256;
      END_IF;
      
     (* BYLO DOSAŽENO KONEČNÉHO STAVU SKOK DO IDDLE *)                                              
      IF current_state = 10 THEN
        ssm_transitions := ssm_transitions OR 4;
        current_state := 0;
      END_IF;
      
END_IF;]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="failure" pouType="program">
        <interface>
          <externalVars>
            <variable name="current_superstate">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="ssm_transitions">
              <type>
                <WORD/>
              </type>
            </variable>
          </externalVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* permission *)
IF current_superstate = 5 THEN
  
      (* set failure symptome WDOx as false *)
      ssm_transitions := ssm_transitions AND NOT 256;
      
      
      
END_IF;]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="watchdogtimer" pouType="program">
        <interface>
          <externalVars>
            <variable name="WDT">
              <type>
                <UINT/>
              </type>
            </variable>
          </externalVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[WDT := WDT + 1;]]></xhtml:p>
          </ST>
        </body>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations>
      <configuration name="Config0">
        <resource name="Res0">
          <task name="task0" priority="0" interval="T#100ms">
            <pouInstance name="SSM" typeName="superstate_machine"/>
            <pouInstance name="AP" typeName="autoproduction"/>
            <pouInstance name="MP" typeName="manualproduction"/>
            <pouInstance name="FAIL" typeName="failure"/>
          </task>
          <task name="WDT_clock" priority="0" interval="T#10ms">
            <pouInstance name="WDTimer" typeName="watchdogtimer"/>
          </task>
        </resource>
        <globalVars>
          <variable name="controller_output">
            <type>
              <DWORD/>
            </type>
          </variable>
          <variable name="WDT">
            <type>
              <UINT/>
            </type>
          </variable>
          <variable name="current_superstate">
            <type>
              <INT/>
            </type>
          </variable>
          <variable name="sensor_output">
            <type>
              <DWORD/>
            </type>
          </variable>
          <variable name="ssm_transitions">
            <type>
              <WORD/>
            </type>
          </variable>
        </globalVars>
      </configuration>
    </configurations>
  </instances>
</project>

TYPE
  LOGLEVEL : (CRITICAL, WARNING, INFO, DEBUG) := INFO;
END_TYPE

FUNCTION_BLOCK LOGGER
  VAR_INPUT
    TRIG : BOOL;
    MSG : STRING;
    LEVEL : LOGLEVEL := INFO;
  END_VAR
  VAR
    TRIG0 : BOOL;
  END_VAR

  IF TRIG AND NOT TRIG0 THEN
  {{
   LogMessage(GetFbVar(LEVEL),(char*)GetFbVar(MSG, .body),GetFbVar(MSG, .len));
  }}
  END_IF;
  TRIG0:=TRIG;
END_FUNCTION_BLOCK



FUNCTION_BLOCK python_eval
  VAR_INPUT
    TRIG : BOOL;
    CODE : STRING;
  END_VAR
  VAR_OUTPUT
    ACK : BOOL;
    RESULT : STRING;
  END_VAR
  VAR
    STATE : DWORD;
    BUFFER : STRING;
    PREBUFFER : STRING;
    TRIGM1 : BOOL;
    TRIGGED : BOOL;
  END_VAR

  {extern void __PythonEvalFB(int, PYTHON_EVAL*);__PythonEvalFB(0, data__);}
END_FUNCTION_BLOCK

FUNCTION_BLOCK python_poll
  VAR_INPUT
    TRIG : BOOL;
    CODE : STRING;
  END_VAR
  VAR_OUTPUT
    ACK : BOOL;
    RESULT : STRING;
  END_VAR
  VAR
    STATE : DWORD;
    BUFFER : STRING;
    PREBUFFER : STRING;
    TRIGM1 : BOOL;
    TRIGGED : BOOL;
  END_VAR

  {extern void __PythonEvalFB(int, PYTHON_EVAL*);__PythonEvalFB(1,(PYTHON_EVAL*)(void*)data__);}
END_FUNCTION_BLOCK

FUNCTION_BLOCK python_gear
  VAR_INPUT
    N : UINT;
    TRIG : BOOL;
    CODE : STRING;
  END_VAR
  VAR_OUTPUT
    ACK : BOOL;
    RESULT : STRING;
  END_VAR
  VAR
    py_eval : python_eval;
    COUNTER : UINT;
    ADD10_OUT : UINT;
    EQ13_OUT : BOOL;
    SEL15_OUT : UINT;
    AND7_OUT : BOOL;
  END_VAR

  ADD10_OUT := ADD(COUNTER, 1);
  EQ13_OUT := EQ(N, ADD10_OUT);
  SEL15_OUT := SEL(EQ13_OUT, ADD10_OUT, 0);
  COUNTER := SEL15_OUT;
  AND7_OUT := AND(EQ13_OUT, TRIG);
  py_eval(TRIG := AND7_OUT, CODE := CODE);
  ACK := py_eval.ACK;
  RESULT := py_eval.RESULT;
END_FUNCTION_BLOCK


PROGRAM superstates
  VAR
    WDT : DINT := 0;
    prox : BOOL := 0;
    a0 : BOOL;
    a1 : BOOL;
    b0 : BOOL;
    b1 : BOOL;
    c0 : BOOL;
    c1 : BOOL;
    d0 : BOOL;
    d1 : BOOL;
    Emg : BOOL := 0;
    manual : BOOL := 0;
    service : BOOL := 0;
    auto : BOOL := 0;
    start : BOOL := 0;
    EmergencyOK : BOOL := 0;
    K0F : BOOL := 0;
    FailureOK : BOOL := 0;
  END_VAR

  INITIAL_STEP INIT:
  END_STEP

  TRANSITION FROM INIT TO IDLE
    := start;
  END_TRANSITION

  STEP IDLE:
  END_STEP

  TRANSITION (PRIORITY := 1) FROM IDLE TO K0
    := auto;
  END_TRANSITION

  STEP K0:
  END_STEP

  TRANSITION FROM K0 TO K1
    := prox;
  END_TRANSITION

  STEP K1:
  END_STEP

  TRANSITION FROM K1 TO K2
    := 2s/a1;
  END_TRANSITION

  STEP K2:
  END_STEP

  TRANSITION FROM K2 TO K3
    := b1;
  END_TRANSITION

  STEP K3:
  END_STEP

  TRANSITION FROM K3 TO K4
    := c0;
  END_TRANSITION

  STEP K4:
  END_STEP

  TRANSITION FROM K4 TO K5
    := c0;
  END_TRANSITION

  STEP K5:
  END_STEP

  TRANSITION FROM K5 TO K6
    := Emg;
  END_TRANSITION

  STEP K6:
  END_STEP

  TRANSITION FROM K6 TO K7
    := c0;
  END_TRANSITION

  STEP K7:
  END_STEP

  TRANSITION FROM K7 TO K8
    := c0;
  END_TRANSITION

  STEP K8:
  END_STEP

  TRANSITION FROM K8 TO K9
    := b0;
  END_TRANSITION

  STEP K9:
  END_STEP

  TRANSITION FROM K9 TO K10
    := d0;
  END_TRANSITION

  STEP K10:
  END_STEP

  TRANSITION FROM K10 TO K11
    := NOT prox;
  END_TRANSITION

  STEP K11:
  END_STEP

  TRANSITION FROM K11 TO IDLE
    := 1;
  END_TRANSITION

  TRANSITION FROM K10 TO K1
    := (WDT > 5);
  END_TRANSITION

  TRANSITION FROM K10 TO EMERGENCY
    := Emg;
  END_TRANSITION

  STEP EMERGENCY:
  END_STEP

  TRANSITION FROM EMERGENCY TO IDLE
    := EmergencyOK;
  END_TRANSITION

  TRANSITION FROM K9 TO K1
    := (WDT > 5);
  END_TRANSITION

  TRANSITION FROM K9 TO EMERGENCY
    := Emg;
  END_TRANSITION

  TRANSITION FROM K8 TO K1
    := (WDT > 5);
  END_TRANSITION

  TRANSITION FROM K8 TO EMERGENCY
    := Emg;
  END_TRANSITION

  TRANSITION FROM K7 TO K1
    := (WDT > 5);
  END_TRANSITION

  TRANSITION FROM K7 TO EMERGENCY
    := Emg;
  END_TRANSITION

  TRANSITION FROM K6 TO K1
    := (WDT > 5);
  END_TRANSITION

  TRANSITION FROM K6 TO EMERGENCY
    := Emg;
  END_TRANSITION

  TRANSITION FROM K5 TO K1
    := (WDT > 5);
  END_TRANSITION

  TRANSITION FROM K5 TO EMERGENCY
    := Emg;
  END_TRANSITION

  TRANSITION FROM K4 TO K1
    := (WDT > 5);
  END_TRANSITION

  TRANSITION FROM K4 TO EMERGENCY
    := Emg;
  END_TRANSITION

  TRANSITION FROM K3 TO K1
    := (WDT > 5);
  END_TRANSITION

  TRANSITION FROM K3 TO EMERGENCY
    := Emg;
  END_TRANSITION

  TRANSITION FROM K2 TO K1
    := (WDT > 5);
  END_TRANSITION

  TRANSITION FROM K2 TO EMERGENCY
    := Emg;
  END_TRANSITION

  TRANSITION FROM K1 TO K1
    := (WDT > 5);
  END_TRANSITION

  TRANSITION FROM K1 TO EMERGENCY
    := Emg;
  END_TRANSITION

  TRANSITION FROM K0 TO EMERGENCY
    := Emg;
  END_TRANSITION

  TRANSITION FROM K0 TO K0Fail
    := (WDT > 5);
  END_TRANSITION

  STEP K0Fail:
    K0F(S);
  END_STEP

  TRANSITION FROM K0Fail TO Failure
    := 1;
  END_TRANSITION

  STEP Failure:
  END_STEP

  TRANSITION FROM Failure TO IDLE
    := FailureOK;
  END_TRANSITION

  TRANSITION (PRIORITY := 3) FROM IDLE TO INIT
    := service;
  END_TRANSITION

  TRANSITION (PRIORITY := 2) FROM IDLE TO IDLE
    := manual;
  END_TRANSITION

END_PROGRAM


CONFIGURATION Config0

  RESOURCE Res0 ON PLC
    TASK task0(INTERVAL := T#20ms,PRIORITY := 0);
    PROGRAM instance0 WITH task0 : superstates;
  END_RESOURCE
END_CONFIGURATION
